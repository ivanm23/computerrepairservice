/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.configurations;

import controller.Controller;
import domain.Klijent;
import domain.Komponenta;
import domain.Konfiguracija;
import domain.StavkaKonfiguracije;
import domain.TipKomponente;
import form.clients.Klijenti;
import form.clients.KlijentiUnos;
import form.components.Komponente;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author Ivan
 */
public class KonfiguracijaUnos extends javax.swing.JFrame {
    private KonfiguracijaPregled parent;
    private LinkedList<StavkaKonfiguracije> stavke = new LinkedList<>();
    private int brojStavke = 1;
    Map map = new HashMap();

    /**
     * Creates new form Konfiguracije
     */
    public KonfiguracijaUnos() {
        initComponents();
        setLocationRelativeTo(null);
        populateCmb();
        populateMap();
        this.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
    }
    public KonfiguracijaUnos(KonfiguracijaPregled parent) {
        initComponents();
        setLocationRelativeTo(null);
        populateCmb();
        populateMap();
        this.parent=parent;
        this.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        pnlClient = new javax.swing.JPanel();
        cmbKlijent = new javax.swing.JComboBox<Klijent>();
        lblKlijent = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblClientNonExistant = new javax.swing.JLabel();
        btnAddClient = new javax.swing.JButton();
        pnlComponent = new javax.swing.JPanel();
        lblType = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox();
        lblComponent = new javax.swing.JLabel();
        cmbComponent = new javax.swing.JComboBox();
        lblType1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOpis = new javax.swing.JTextArea();
        btnAddComponent = new javax.swing.JButton();
        btnAddClient1 = new javax.swing.JButton();
        lblClientNonExistant1 = new javax.swing.JLabel();
        lblComponent1 = new javax.swing.JLabel();
        cmbKolicina = new javax.swing.JComboBox();
        pnlConfig = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        prgBarConfiguration = new javax.swing.JProgressBar();
        lblType2 = new javax.swing.JLabel();
        lblType3 = new javax.swing.JLabel();
        lblType4 = new javax.swing.JLabel();
        lblType5 = new javax.swing.JLabel();
        lblType6 = new javax.swing.JLabel();
        lblType7 = new javax.swing.JLabel();
        lblType8 = new javax.swing.JLabel();
        lblType9 = new javax.swing.JLabel();
        lblType10 = new javax.swing.JLabel();
        lblODD = new javax.swing.JLabel();
        lblMOBO = new javax.swing.JLabel();
        lblRAM = new javax.swing.JLabel();
        lblGPU = new javax.swing.JLabel();
        lblPSU = new javax.swing.JLabel();
        lblHDD = new javax.swing.JLabel();
        lblSSD = new javax.swing.JLabel();
        lblCASE = new javax.swing.JLabel();
        lblFAN = new javax.swing.JLabel();
        lblClient = new javax.swing.JLabel();
        lblType11 = new javax.swing.JLabel();
        lblCPU = new javax.swing.JLabel();
        lblOwner = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Konfiguracija");

        btnCancel.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnSave.setText("Saƒçuvaj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        pnlClient.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmbKlijent.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        cmbKlijent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbKlijentActionPerformed(evt);
            }
        });

        lblKlijent.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        lblKlijent.setText("Klijent:");

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel1.setText("Odabir klijenta");

        lblClientNonExistant.setFont(new java.awt.Font("Century Gothic", 1, 10)); // NOI18N
        lblClientNonExistant.setText("Klijent ne postoji na listi? Kreiraj novog:");

        btnAddClient.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnAddClient.setText("Kreiraj");
        btnAddClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlClientLayout = new javax.swing.GroupLayout(pnlClient);
        pnlClient.setLayout(pnlClientLayout);
        pnlClientLayout.setHorizontalGroup(
            pnlClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClientLayout.createSequentialGroup()
                .addGroup(pnlClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlClientLayout.createSequentialGroup()
                        .addGap(0, 141, Short.MAX_VALUE)
                        .addComponent(lblClientNonExistant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddClient))
                    .addGroup(pnlClientLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblKlijent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbKlijent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(pnlClientLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlClientLayout.setVerticalGroup(
            pnlClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlClientLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addGroup(pnlClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbKlijent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblKlijent))
                .addGap(18, 18, 18)
                .addGroup(pnlClientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddClient)
                    .addComponent(lblClientNonExistant))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlComponent.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblType.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        lblType.setText("Tip:");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setText("Dodavanje komponenti");

        cmbType.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        cmbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTypeActionPerformed(evt);
            }
        });

        lblComponent.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        lblComponent.setText("Komponenta:");

        cmbComponent.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        cmbComponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbComponentActionPerformed(evt);
            }
        });

        lblType1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        lblType1.setText("Opis:");

        txtOpis.setEditable(false);
        txtOpis.setColumns(20);
        txtOpis.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        txtOpis.setRows(5);
        jScrollPane1.setViewportView(txtOpis);

        btnAddComponent.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnAddComponent.setText("Dodaj");
        btnAddComponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddComponentActionPerformed(evt);
            }
        });

        btnAddClient1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        btnAddClient1.setText("Kreiraj");
        btnAddClient1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddClient1ActionPerformed(evt);
            }
        });

        lblClientNonExistant1.setFont(new java.awt.Font("Century Gothic", 1, 10)); // NOI18N
        lblClientNonExistant1.setText("Komponenta ne postoji na listi? Kreiraj novu:");

        lblComponent1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        lblComponent1.setText("Koliƒçina:");

        cmbKolicina.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        cmbKolicina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbKolicinaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlComponentLayout = new javax.swing.GroupLayout(pnlComponent);
        pnlComponent.setLayout(pnlComponentLayout);
        pnlComponentLayout.setHorizontalGroup(
            pnlComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlComponentLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(88, 88, 88))
            .addGroup(pnlComponentLayout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(lblClientNonExistant1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddClient1)
                .addGap(10, 10, 10))
            .addGroup(pnlComponentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblType1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlComponentLayout.createSequentialGroup()
                        .addGroup(pnlComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlComponentLayout.createSequentialGroup()
                                .addComponent(cmbType, 0, 77, Short.MAX_VALUE)
                                .addGap(6, 6, 6))
                            .addGroup(pnlComponentLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(lblType)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(pnlComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlComponentLayout.createSequentialGroup()
                                .addComponent(lblComponent)
                                .addGap(75, 75, 75)
                                .addComponent(lblComponent1)
                                .addGap(32, 32, 32))
                            .addGroup(pnlComponentLayout.createSequentialGroup()
                                .addComponent(cmbComponent, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbKolicina, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))))
                    .addGroup(pnlComponentLayout.createSequentialGroup()
                        .addGroup(pnlComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnAddComponent, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        pnlComponentLayout.setVerticalGroup(
            pnlComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlComponentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblType)
                    .addComponent(lblComponent)
                    .addComponent(lblComponent1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbComponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbKolicina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblType1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddComponent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlComponentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddClient1)
                    .addComponent(lblClientNonExistant1))
                .addContainerGap())
        );

        pnlConfig.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel3.setText("Trenutna konfiguracija");

        prgBarConfiguration.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        prgBarConfiguration.setOpaque(false);

        lblType2.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblType2.setText("CPU:");

        lblType3.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblType3.setText("MOBO:");

        lblType4.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblType4.setText("RAM:");

        lblType5.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblType5.setText("GPU:");

        lblType6.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblType6.setText("PSU:");

        lblType7.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblType7.setText("HDD:");

        lblType8.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblType8.setText("SSD:");

        lblType9.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblType9.setText("CASE:");

        lblType10.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblType10.setText("FAN:");

        lblODD.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        lblMOBO.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        lblRAM.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        lblGPU.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        lblPSU.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        lblHDD.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        lblSSD.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        lblCASE.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        lblFAN.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        lblClient.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblClient.setText("Vlasnik:");

        lblType11.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        lblType11.setText("ODD:");

        lblCPU.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        lblOwner.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N

        javax.swing.GroupLayout pnlConfigLayout = new javax.swing.GroupLayout(pnlConfig);
        pnlConfig.setLayout(pnlConfigLayout);
        pnlConfigLayout.setHorizontalGroup(
            pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConfigLayout.createSequentialGroup()
                .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlConfigLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblType5)
                            .addComponent(lblType4)
                            .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblType3)
                                .addComponent(lblType2, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlConfigLayout.createSequentialGroup()
                                    .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblType6)
                                        .addComponent(lblType7)
                                        .addComponent(lblType8)
                                        .addComponent(lblType9))
                                    .addGap(2, 2, 2)))
                            .addComponent(lblClient)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlConfigLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblType11, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblType10, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(prgBarConfiguration, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblMOBO, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCASE, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSSD, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblHDD, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                        .addComponent(lblFAN, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblOwner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblODD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblRAM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblGPU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblPSU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlConfigLayout.setVerticalGroup(
            pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConfigLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prgBarConfiguration, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblClient)
                    .addComponent(lblOwner, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 20, Short.MAX_VALUE)
                .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlConfigLayout.createSequentialGroup()
                        .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlConfigLayout.createSequentialGroup()
                                .addComponent(lblType2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblMOBO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblType3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlConfigLayout.createSequentialGroup()
                                        .addComponent(lblType4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblType5)
                                            .addComponent(lblGPU, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblPSU, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblType6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlConfigLayout.createSequentialGroup()
                                                .addComponent(lblHDD, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblSSD, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(pnlConfigLayout.createSequentialGroup()
                                                .addComponent(lblType7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lblType8)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblType9, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblCASE, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(lblRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblCPU, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblType10))
                    .addComponent(lblFAN, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(pnlConfigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblType11, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblODD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlClient, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlConfig, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlComponent, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlComponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        parent.search();
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void cmbKlijentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKlijentActionPerformed
        Klijent klijent = (Klijent) cmbKlijent.getSelectedItem();
        lblOwner.setText(klijent.toString());


    }//GEN-LAST:event_cmbKlijentActionPerformed

    private void btnAddClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddClientActionPerformed
        JFrame addClient = new KlijentiUnos(this);
        addClient.setVisible(true);
    }//GEN-LAST:event_btnAddClientActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            Long id = Controller.getInstance().getConfigurationLastID();
            Konfiguracija konfiguracija = new Konfiguracija();
            konfiguracija.setKonfiguracijaID(id);
            konfiguracija.setVlasnik((Klijent) cmbKlijent.getSelectedItem());

            double cena = 0;

            for (StavkaKonfiguracije stavka : stavke) {
                cena += stavka.getUkupnaCena();
                stavka.setKonfiguracija(konfiguracija);
            }

            konfiguracija.setUkupnaCena(cena);
            Controller.getInstance().saveConfiguration(konfiguracija);
            JOptionPane.showMessageDialog(this, "Konfiguracija korisnika "+konfiguracija.getVlasnik().toString()+" je uspe≈°no saƒçuvana!", "Uspe≈°no ƒçuvanje", JOptionPane.INFORMATION_MESSAGE);
            for (StavkaKonfiguracije stavka : stavke) {
                Controller.getInstance().saveConfigurationItem(stavka);
            }
        } catch (Exception ex) {
            Logger.getLogger(KonfiguracijaUnos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cmbKolicinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbKolicinaActionPerformed
    }//GEN-LAST:event_cmbKolicinaActionPerformed

    private void btnAddClient1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddClient1ActionPerformed
        JFrame unosKomponente = new Komponente();
        unosKomponente.setVisible(true);
    }//GEN-LAST:event_btnAddClient1ActionPerformed

    private void btnAddComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddComponentActionPerformed
        Komponenta komponenta = (Komponenta) cmbComponent.getSelectedItem();
        StavkaKonfiguracije stavka = new StavkaKonfiguracije();
        stavka.setBrojKomponente(new Long(++brojStavke));
        stavka.setKomponenta(komponenta);
        stavka.setPojedinacnaCena(komponenta.getCena());
        stavka.setKolicina(Integer.parseInt(cmbKolicina.getSelectedItem().toString()));
        stavka.setUkupnaCena(stavka.getPojedinacnaCena() * stavka.getKolicina());

        if (!evaluateComponent(komponenta)) {
            JOptionPane.showMessageDialog(this, "Nije dozvoljeno dalje dodavanje komponente ovog tipa!", "Nedozvoljen unos", JOptionPane.ERROR_MESSAGE);
        } else {
            this.stavke.add(stavka);
            updateComponentLabels(stavka);
            updateStatusBar();
        }
    }//GEN-LAST:event_btnAddComponentActionPerformed

    private void cmbComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbComponentActionPerformed
        updateDescription();
    }//GEN-LAST:event_cmbComponentActionPerformed

    private void cmbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTypeActionPerformed
        try {
            TipKomponente tip = (TipKomponente) cmbType.getSelectedItem();
            LinkedList<Komponenta> listaKomponenti = Controller.getInstance().getComponents(tip.ordinal());
            cmbComponent.removeAllItems();

            for (Komponenta komponenta : listaKomponenti) {
                cmbComponent.addItem(komponenta);
            }

            updateDescription();
            populateAmount();
        } catch (Exception ex) {
            Logger.getLogger(KonfiguracijaUnos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KonfiguracijaUnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KonfiguracijaUnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KonfiguracijaUnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KonfiguracijaUnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KonfiguracijaUnos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddClient;
    private javax.swing.JButton btnAddClient1;
    private javax.swing.JButton btnAddComponent;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbComponent;
    private javax.swing.JComboBox<Klijent> cmbKlijent;
    private javax.swing.JComboBox cmbKolicina;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCASE;
    private javax.swing.JLabel lblCPU;
    private javax.swing.JLabel lblClient;
    private javax.swing.JLabel lblClientNonExistant;
    private javax.swing.JLabel lblClientNonExistant1;
    private javax.swing.JLabel lblComponent;
    private javax.swing.JLabel lblComponent1;
    private javax.swing.JLabel lblFAN;
    private javax.swing.JLabel lblGPU;
    private javax.swing.JLabel lblHDD;
    private javax.swing.JLabel lblKlijent;
    private javax.swing.JLabel lblMOBO;
    private javax.swing.JLabel lblODD;
    private javax.swing.JLabel lblOwner;
    private javax.swing.JLabel lblPSU;
    private javax.swing.JLabel lblRAM;
    private javax.swing.JLabel lblSSD;
    private javax.swing.JLabel lblType;
    private javax.swing.JLabel lblType1;
    private javax.swing.JLabel lblType10;
    private javax.swing.JLabel lblType11;
    private javax.swing.JLabel lblType2;
    private javax.swing.JLabel lblType3;
    private javax.swing.JLabel lblType4;
    private javax.swing.JLabel lblType5;
    private javax.swing.JLabel lblType6;
    private javax.swing.JLabel lblType7;
    private javax.swing.JLabel lblType8;
    private javax.swing.JLabel lblType9;
    private javax.swing.JPanel pnlClient;
    private javax.swing.JPanel pnlComponent;
    private javax.swing.JPanel pnlConfig;
    private javax.swing.JProgressBar prgBarConfiguration;
    private javax.swing.JTextArea txtOpis;
    // End of variables declaration//GEN-END:variables

    public void populateCmb() {
        try {
            LinkedList<Klijent> klijenti = Controller.getInstance().getKlijenti();

            for (Klijent klijent : klijenti) {
                cmbKlijent.addItem(klijent);

            }

            for (TipKomponente tip : TipKomponente.values()) {
                cmbType.addItem(tip);
            }
        } catch (Exception ex) {
            Logger.getLogger(Klijenti.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateDescription() {
        txtOpis.setText("");
        if (cmbComponent.getSelectedIndex() != -1) {
            Komponenta komponenta = (Komponenta) cmbComponent.getSelectedItem();
            txtOpis.setText(komponenta.getOpis());
        }

    }

    private void updateStatusBar() {
        int progress = 0;
        Set set = map.entrySet();
        Iterator itr = set.iterator();

        while (itr.hasNext()) {
            Map.Entry entry = (Map.Entry) itr.next();

            if ((boolean) entry.getValue()) {
                progress += 100 / (map.size());
            }
        }
        prgBarConfiguration.setValue(progress);
        prgBarConfiguration.setToolTipText("" + progress + "%");
    }

    private void updateComponentLabels(StavkaKonfiguracije stavka) {

        switch (stavka.getKomponenta().getTipKomponente()) {
            case CPU:
                lblCPU.setText(stavka.toString());
                map.put(lblCPU, true);
                break;
            case MOBO:
                lblMOBO.setText(stavka.toString());
                map.put(lblMOBO, true);
                break;
            case RAM:
                if (lblRAM.getText().isEmpty()) {
                    lblRAM.setText(stavka.toString());
                } else {
                    lblRAM.setText(lblRAM.getText() + ", " + stavka);
                }
                map.put(lblRAM, true);
                break;
            case PSU:
                lblPSU.setText(stavka.toString());
                map.put(lblPSU, true);
                break;
            case GPU:
                if (lblGPU.getText().isEmpty()) {
                    lblGPU.setText(stavka.toString());
                } else {
                    lblGPU.setText(lblGPU.getText() + ", " + stavka);
                }
                map.put(lblGPU, true);
                break;
            case CASE:
                lblCASE.setText(stavka.toString());
                map.put(lblCASE, true);
                break;
            case FAN:
                if (lblFAN.getText().isEmpty()) {
                    lblFAN.setText(stavka.toString());
                } else {
                    lblFAN.setText(lblFAN.getText() + ", " + stavka);
                }
                map.put(lblFAN, true);
                break;
            case HDD:
                if (lblHDD.getText().isEmpty()) {
                    lblHDD.setText(stavka.getKomponenta().toString() + " x" + stavka.getKolicina());
                } else {
                    lblHDD.setText(lblHDD.getText() + ", " + stavka.getKomponenta().toString() + " x" + stavka.getKolicina());
                }
                map.put(lblHDD, true);
                break;
            case SSD:
                if (lblSSD.getText().isEmpty()) {
                    lblSSD.setText(stavka.getKomponenta().toString() + " x" + stavka.getKolicina());
                } else {
                    lblSSD.setText(lblSSD.getText() + ", " + stavka.getKomponenta().toString() + " x" + stavka.getKolicina());
                }
                map.put(lblSSD, true);
                break;
            case ODD:
                lblODD.setText(stavka.getKomponenta().toString());
                map.put(lblODD, true);
                break;

        }
    }

    private void populateAmount() {
        cmbKolicina.removeAllItems();
        switch ((TipKomponente) cmbType.getSelectedItem()) {
            case CPU:
                cmbKolicina.addItem(1);
                break;
            case CASE:
                cmbKolicina.addItem(1);
                break;
            case MOBO:
                cmbKolicina.addItem(1);
                break;
            case PSU:
                cmbKolicina.addItem(1);
                break;
            case ODD:
                cmbKolicina.addItem(1);
                break;
            case RAM:
                cmbKolicina.addItem(1);
                cmbKolicina.addItem(2);
                cmbKolicina.addItem(3);
                cmbKolicina.addItem(4);
                break;
            case GPU:
                cmbKolicina.addItem(1);
                cmbKolicina.addItem(2);
                cmbKolicina.addItem(3);
                cmbKolicina.addItem(4);
                break;
            case HDD:
                cmbKolicina.addItem(1);
                cmbKolicina.addItem(2);
                cmbKolicina.addItem(3);
                cmbKolicina.addItem(4);
                break;
            case SSD:
                cmbKolicina.addItem(1);
                cmbKolicina.addItem(2);
                cmbKolicina.addItem(3);
                cmbKolicina.addItem(4);
                break;
            case FAN:
                cmbKolicina.addItem(1);
                cmbKolicina.addItem(2);
                cmbKolicina.addItem(3);
                cmbKolicina.addItem(4);
                cmbKolicina.addItem(5);
                break;
        }

    }

    private void populateMap() {
        this.map.put(lblODD, false);
        this.map.put(lblCASE, false);
        this.map.put(lblGPU, false);
        this.map.put(lblRAM, false);
        this.map.put(lblHDD, false);
        this.map.put(lblSSD, false);
        this.map.put(lblMOBO, false);
        this.map.put(lblCPU, false);
        this.map.put(lblFAN, false);
        this.map.put(lblPSU, false);
    }

    private boolean evaluateComponent(Komponenta komponenta) {

        switch (komponenta.getTipKomponente()) {
            case CPU:
                for (StavkaKonfiguracije stavka : stavke) {
                    if (stavka.getKomponenta().getTipKomponente() == TipKomponente.CPU) {
                        return false;
                    }
                }
                break;
            case CASE:
                for (StavkaKonfiguracije stavka : stavke) {
                    if (stavka.getKomponenta().getTipKomponente() == TipKomponente.CASE) {
                        return false;
                    }
                }
                break;
            case PSU:
                for (StavkaKonfiguracije stavka : stavke) {
                    if (stavka.getKomponenta().getTipKomponente() == TipKomponente.PSU) {
                        return false;
                    }
                }
                break;
            case MOBO:
                for (StavkaKonfiguracije stavka : stavke) {
                    if (stavka.getKomponenta().getTipKomponente() == TipKomponente.MOBO) {
                        return false;
                    }
                }
                break;

        }
        return true;
    }

}
